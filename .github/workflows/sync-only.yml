name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *' # каждые 15 минут
  workflow_dispatch:
    inputs:
      mode:
        description: 'Режим запуска (sync или test)'
        required: false
        default: 'sync'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

jobs:
  sync:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: 🧩 Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 💾 Save current fork SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: 🔗 Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: ⚙️ Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: 🔄 Merge upstream
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }} -m "Fast-forward merge"; then
            echo "merged=ff" >> $GITHUB_OUTPUT
          else
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: 💾 Save new SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: 🚀 Push if changed
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.before.outputs.before_sha }}" != "${{ steps.after.outputs.after_sha }}" ]; then
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${{ env.FORK_BRANCH }}
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 📢 Send Dota updates to Discord
        if: steps.push.outputs.changed == 'true' || github.event.inputs.mode == 'test'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          # === ТЕСТОВЫЙ РЕЖИМ ===
          if [ "${{ github.event.inputs.mode }}" = "test" ]; then
            printf '%s\n' "**Тип обновления:** Dota 2 Test Mode" "" \
              "**Что нового:**" \
              "[v] test 12345 => 12346" \
              "[h] testhash123 => testhash456" \
              "[s] test CN hero => hero2" "" \
              "🔗 [Посмотреть коммит](https://github.com/AINewsAccount/DOTA2_WEB/commit/testhash)" > /tmp/desc.txt

            json=$(jq -n --rawfile desc /tmp/desc.txt \
              --arg title "🧪 Dota 2 Test Notification" \
              --argjson color 16776960 \
              '{embeds: [{title: $title, description: $desc, color: $color}]}')

            curl -sS -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK"
            echo "✅ Тестовое сообщение отправлено."
            exit 0
          fi

          # === ОСНОВНОЙ РЕЖИМ ===
          before="${{ steps.before.outputs.before_sha }}"
          after="${{ steps.after.outputs.after_sha }}"

          git log --pretty=format:"%H" "$before..$after" | tac | while read -r hash; do
            [ -z "$hash" ] && continue

            title=$(git show -s --format=%s "$hash")
            body=$(git show -s --format=%b "$hash")
            commit_url="https://github.com/${{ github.repository }}/commit/$hash"

            if echo "$title $body" | grep -iq "dota"; then
              if echo "$title" | grep -iq "staging"; then
                type_update="Dota 2 Staging"
              elif echo "$title" | grep -iq "experimental"; then
                type_update="Dota 2 Experimental"
              elif echo "$title" | grep -iq "heroes"; then
                type_update="Dota 2 Heroes"
              else
                type_update="Dota 2 Update"
              fi

              added_lines=$(git show "$hash" | grep -E "^\+" | grep -vE "^\+\+\+|^---" | head -n 10)
              [ -z "$added_lines" ] && added_lines="(мелкие изменения)"

              printf '%s\n' "**Тип обновления:** ${type_update}" "" \
                "**Что нового:**" \
                "${added_lines}" "" \
                "🔗 [Посмотреть коммит](${commit_url})" > /tmp/desc.txt

              json=$(jq -n --rawfile desc /tmp/desc.txt \
                --arg title "📢 Dota 2 Update" \
                --argjson color 3447003 \
                '{embeds: [{title: $title, description: $desc, color: $color}]}')

              curl -sS -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK"
              echo "✅ Sent update for $hash"
            fi
          done
