name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: '–†–µ–∂–∏–º: sync (–æ–±—ã—á–Ω—ã–π) –∏–ª–∏ test (–ø–æ—Å–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ embed)'
        required: false
        default: 'sync'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

permissions:
  contents: write

jobs:
  # ---------- TEST JOB: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é —Å mode=test ----------
  test:
    name: Test Discord embed
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'test' }}
    steps:
      - name: Send test embed to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -eux

          if [ -z "${DISCORD_WEBHOOK}" ]; then
            echo "‚ö†Ô∏è DISCORD_WEBHOOK not set. Aborting."
            exit 1
          fi

          # --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ heredoc (—Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫!) ---
          embed_desc=$(cat <<'DESC'
**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** Dota 2 Test Mode
**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
[v] test 12345 => 12346
[h] testhash123 => testhash456
[s] test CN hero => hero2
DESC
)

          # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º JSON —á–µ—Ä–µ–∑ jq (–±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
          json=$(jq -n \
            --arg title "üß™ Dota 2 Test Notification" \
            --arg desc "$embed_desc" \
            --argjson color 16776960 \
            '{embeds: [{title: $title, description: $desc, color: $color}]}')

          echo "Debug JSON:"
          echo "$json"

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
          curl -sS -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK" \
            && echo "‚úÖ Test embed sent." \
            || (echo "‚ùå Failed to send test embed." && exit 1)

  # ---------- SYNC JOB: –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ mode == test) ----------
  sync:
    name: Sync upstream -> fork
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'test' }}
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Save before SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: Merge upstream (safe)
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }}; then
            echo "merged=ff" >> $GITHUB_OUTPUT
          else
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true
            if git ls-files -u | grep .; then
              echo "‚ö†Ô∏è Merge conflict detected. Aborting sync."
              git merge --abort || true
              exit 0
            fi
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: Save after SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Push if changed
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          before="${{ steps.before.outputs.before_sha }}"
          after="${{ steps.after.outputs.after_sha }}"
          if [ "$before" != "$after" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:refs/heads/${{ env.FORK_BRANCH }}
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Dota update embeds to Discord
        if: steps.push.outputs.changed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -eux

          if [ -z "${DISCORD_WEBHOOK}" ]; then
            echo "‚ö†Ô∏è DISCORD_WEBHOOK not set. Skipping notifications."
            exit 0
          fi

          before_sha="${{ steps.before.outputs.before_sha }}"
          after_sha="${{ steps.after.outputs.after_sha }}"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ SHA –≤–∞–ª–∏–¥–Ω—ã
          if ! git rev-parse "$before_sha" >/dev/null 2>&1 || ! git rev-parse "$after_sha" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è One of SHAs is invalid. before=$before_sha after=$after_sha"
            exit 0
          fi

          # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º embed –Ω–∞ –∫–∞–∂–¥—ã–π
          git log --pretty=format:"%H" "${before_sha}..${after_sha}" | tac | while read -r hash; do
            [ -z "$hash" ] && continue

            title=$(git show -s --format=%s "$hash")
            commit_url="https://github.com/${{ github.repository }}/commit/$hash"

            if echo "$title" | grep -iq "staging"; then
              type_update="Dota 2 Staging"
              color=15105570
            elif echo "$title" | grep -iq "experimental"; then
              type_update="Dota 2 Experimental"
              color=10181046
            elif echo "$title" | grep -iq "heroes"; then
              type_update="Dota 2 Heroes"
              color=3066993
            else
              type_update="Dota 2 Update"
              color=3447003
            fi

            added_lines=$(git show "$hash" | grep -E "^\+" | grep -vE "^\+\+\+|^---" | head -n 50)
            [ -z "$added_lines" ] && added_lines="(–º–µ–ª–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º heredoc –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            embed_desc=$(cat <<EOF
**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${type_update}
**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
${added_lines}
üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç](${commit_url})
EOF
)

            json=$(jq -n \
              --arg title "‚öôÔ∏è Dota 2 Update" \
              --arg desc "$embed_desc" \
              --argjson color "$color" \
              '{embeds: [{title: $title, description: $desc, color: $color}]}')

            # –û—Ç–ø—Ä–∞–≤–∫–∞
            curl -sS -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK" \
              && echo "‚úÖ Sent embed for $hash" \
              || echo "‚ùå Failed to send embed for $hash"
          done
