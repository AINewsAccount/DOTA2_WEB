name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *' # –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode (normal/test)'
        required: false
        default: 'normal'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: üß© Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üíæ Save current fork SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üîó Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: ‚öôÔ∏è Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: üß™ Test Discord Notification (manual)
        if: ${{ github.event.inputs.mode == 'test' }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "üß™ Sending test notification to Discord..."

          test_msg=$(cat <<'MSG'
**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** Dota 2 Test Mode
**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
[v] test 12345 => 12346
[h] testhash123 => testhash456
[s] test CN hero => hero2
MSG
)

          json=$(jq -n --arg content "$test_msg" '{content: $content}')

          curl -s -H "Content-Type: application/json" \
               -X POST -d "$json" "$DISCORD_WEBHOOK" \
               && echo "‚úÖ Test message sent." \
               || echo "‚ö†Ô∏è Failed to send test message."

          exit 0

      - name: üîÑ Merge upstream into fork branch
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }} -m "Fast-forward merge upstream/${{ env.UPSTREAM_BRANCH }}" 2>/dev/null; then
            echo "merged=ff" >> $GITHUB_OUTPUT
            echo "‚úÖ Fast-forward merge –≤—ã–ø–æ–ª–Ω–µ–Ω."
          else
            echo "‚ÑπÔ∏è Fast-forward –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π merge..."
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: üíæ Save new SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üöÄ Compare SHAs and push if changed
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.before.outputs.before_sha }}" != "${{ steps.after.outputs.after_sha }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚¨ÜÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è push..."
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${{ env.FORK_BRANCH }}
            echo "‚úÖ –§–æ—Ä–∫ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å upstream."
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—Å—ë —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ."
          fi

      - name: üêõ Debug SHAs and log
        if: steps.push.outputs.changed == 'true'
        run: |
          echo "Debug: Before SHA: ${{ steps.before.outputs.before_sha }}"
          echo "Debug: After SHA: ${{ steps.after.outputs.after_sha }}"
          echo "Debug: Git log range: ${{ steps.before.outputs.before_sha }}..${{ steps.after.outputs.after_sha }}"
          git log --pretty=oneline ${{ steps.before.outputs.before_sha }}..${{ steps.after.outputs.after_sha }} || echo "Error in git log"

      - name: üì¢ Send Dota updates to Discord
        if: steps.push.outputs.changed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          updates=""
          while read -r hash; do
            [ -z "$hash" ] && continue

            title=$(git show -s --format=%s $hash | sed 's/"/\\"/g')
            body=$(git show -s --format=%b $hash | sed 's/"/\\"/g')
            commit_url="https://github.com/${{ github.repository }}/commit/$hash"

            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if echo "$title" | grep -iq "staging"; then
              type_update="Dota 2 Staging"
            elif echo "$title" | grep -iq "experimental"; then
              type_update="Dota 2 Experimental"
            elif echo "$title" | grep -iq "heroes"; then
              type_update="Dota 2 Heroes"
            else
              type_update="Dota 2 Update"
            fi

            added_lines=$(git show $hash | grep -E "^\+|^-" | grep -vE "^\+\+\+|^---" | head -n 10 | sed 's/^/    /')
            [ -z "$added_lines" ] && added_lines="(–º–µ–ª–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"

            msg=$(cat <<MSG
**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${type_update}
**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
${added_lines}
üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç](${commit_url})
MSG
)

            json=$(jq -n --arg content "$msg" '{content: $content}')

            curl -s -H "Content-Type: application/json" \
                 -X POST -d "$json" "$DISCORD_WEBHOOK" \
                 && echo "‚úÖ Sent update for $hash" \
                 || echo "‚ö†Ô∏è Failed to send update for $hash"

          done < <(git log --pretty=format:"%H" ${{ steps.before.outputs.before_sha }}..${{ steps.after.outputs.after_sha }} | tac)
