name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *' # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  workflow_dispatch:
    inputs:
      mode:
        description: '–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (sync –∏–ª–∏ test)'
        required: false
        default: 'sync'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

jobs:
  sync:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: üß© Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üíæ Save current fork SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üîó Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: ‚öôÔ∏è Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: üîÑ Merge upstream
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }} -m "Fast-forward merge"; then
            echo "merged=ff" >> $GITHUB_OUTPUT
          else
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: üíæ Save new SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üöÄ Push if changed
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.before.outputs.before_sha }}" != "${{ steps.after.outputs.after_sha }}" ]; then
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${{ env.FORK_BRANCH }}
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

            - name: üì¢ Send Dota updates to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          echo "üì¢ Checking commits for Dota updates..."

          MODE="${{ github.event.inputs.mode || 'auto' }}" # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ workflow_dispatch

          # üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if [[ "$MODE" == "test" ]]; then
            echo "üß™ Sending test message..."
            embed_title="üß™ Dota 2 Test Notification"
            embed_desc=$'**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** Dota 2 Test Mode\n\n**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**\n[v] test 12345 => 12346\n[h] testhash123 => testhash456\n[s] test CN hero => hero2\n\nüîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç'
            jq -n \
              --arg title "$embed_title" \
              --arg desc "$embed_desc" \
              '{embeds: [{title: $title, description: $desc, color: 5814783}]}' \
            | curl -s -H "Content-Type: application/json" -X POST -d @- "$DISCORD_WEBHOOK"
            exit 0
          fi

          before="${{ steps.before.outputs.before_sha }}"
          after="${{ steps.after.outputs.after_sha }}"

          # üß© –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SHA –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
          if git rev-parse "$before" >/dev/null 2>&1 && git rev-parse "$after" >/dev/null 2>&1; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±–∞ SHA, —Å—Ç—Ä–æ–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω $before..$after"
            log_range=$(git log --pretty=format:"%H" "$before..$after" | tac)
          else
            echo "‚ö†Ô∏è –û–¥–∏–Ω –∏–∑ SHA –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ. –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å fetch..."
            git fetch --unshallow || true
            if git rev-parse "$before" >/dev/null 2>&1 && git rev-parse "$after" >/dev/null 2>&1; then
              log_range=$(git log --pretty=format:"%H" "$before..$after" | tac)
            else
              echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SHA. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–∏—Ç–æ–≤."
              log_range=$(git log -n 5 --pretty=format:"%H" | tac)
            fi
          fi

          # üîÅ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
          if [[ "$MODE" == "resend" ]]; then
            echo "üîÅ Resending last commit..."
            last_commit=$(git log -n 1 --pretty=format:"%H")
            log_range="$last_commit"
          fi

          # --- –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–º–º–∏—Ç—É ---
          while read -r hash; do
            [ -z "$hash" ] && continue

            title=$(git show -s --format=%s "$hash")
            body=$(git show -s --format=%b "$hash")
            commit_url="https://github.com/${{ github.repository }}/commit/$hash"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if echo "$title" | grep -iq "staging"; then
              type_update="Dota 2 Staging"
            elif echo "$title" | grep -iq "experimental"; then
              type_update="Dota 2 Experimental"
            elif echo "$title" | grep -iq "heroes"; then
              type_update="Dota 2 Heroes"
            else
              type_update="Dota 2 Update"
            fi

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ 10 —Å—Ç—Ä–æ–∫)
            added_lines=$(git show "$hash" | grep -E "^\+" | grep -vE "^\+\+\+|^---" | head -n 10)
            [ -z "$added_lines" ] && added_lines="(–º–µ–ª–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"

            # –§–æ—Ä–º–∏—Ä—É–µ–º embed
            embed_title="üß© ${type_update}"
            embed_desc=$(printf '**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** %s\n\n**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**\n%s\n\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç](%s)' "$type_update" "$added_lines" "$commit_url")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed –≤ Discord
            jq -n \
              --arg title "$embed_title" \
              --arg desc "$embed_desc" \
              '{embeds: [{title: $title, description: $desc, color: 3066993}]}' \
            | curl -s -H "Content-Type: application/json" -X POST -d @- "$DISCORD_WEBHOOK"

            echo "‚úÖ Sent update for $hash"
          done <<< "$log_range"

