name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Mode (normal/test)'
        required: false
        default: 'normal'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

permissions:
  contents: write

jobs:
  test_notify:
    name: Test notification (only when mode == test)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.mode == 'test' }}
    steps:
      - name: Send test message to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "‚ö†Ô∏è DISCORD_WEBHOOK not set. Skipping."
            exit 0
          fi

          echo "üß™ Preparing test message..."
          test_msg="**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** Dota 2 Test Mode
**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
[v] test 12345 => 12346
[h] testhash123 => testhash456
[s] test CN hero => hero2"

          json=$(jq -n --arg content "$test_msg" '{content: $content}')
          curl -s -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK" \
            && echo "‚úÖ Test message sent." \
            || (echo "‚ö†Ô∏è Failed to send test message." && exit 1)

  sync:
    name: Sync upstream -> fork (normal mode)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.mode != 'test' }}
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Save current fork SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: Merge upstream into fork branch
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          echo "Attempting fast-forward merge..."
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }}; then
            echo "merged=ff" >> $GITHUB_OUTPUT
            echo "‚úÖ Fast-forward merge –≤—ã–ø–æ–ª–Ω–µ–Ω."
          else
            echo "‚ö†Ô∏è Fast-forward –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π merge..."
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true

            if git ls-files -u | grep .; then
              echo "‚ùå Merge conflict detected. Aborting sync."
              git merge --abort || true
              exit 0
            fi
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: Save new SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Push changes if updated
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          before="${{ steps.before.outputs.before_sha }}"
          after="${{ steps.after.outputs.after_sha }}"
          if [ "$before" != "$after" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚¨ÜÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è push..."
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:refs/heads/${{ env.FORK_BRANCH }}
            echo "‚úÖ –§–æ—Ä–∫ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω."
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—Å—ë —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ."
          fi

      - name: Debug SHAs and log
        if: steps.push.outputs.changed == 'true'
        run: |
          echo "Debug: Before SHA: ${{ steps.before.outputs.before_sha }}"
          echo "Debug: After SHA: ${{ steps.after.outputs.after_sha }}"
          git log --pretty=oneline ${{ steps.before.outputs.before_sha }}..${{ steps.after.outputs.after_sha }} || true

      - name: Send Dota updates to Discord
        if: steps.push.outputs.changed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "‚ö†Ô∏è DISCORD_WEBHOOK not set. Skipping notification."
            exit 0
          fi

          before="${{ steps.before.outputs.before_sha }}"
          after="${{ steps.after.outputs.after_sha }}"
          updates=""

          echo "Collecting updates between $before and $after..."

          while read -r hash; do
            [ -z "$hash" ] && continue

            history_files=$(git show --name-only --pretty="" $hash | grep '_HISTORY_by_date.txt$' || true)
            [ -z "$history_files" ] && continue

            commit_url="https://github.com/${{ github.repository }}/commit/$hash"

            for file in $history_files; do
              added_lines=$(git show $hash -- "$file" | grep '^+' | sed 's/^+//' | grep -E '\[s\]|\[v\]|\[h\]' || true)
              [ -z "$added_lines" ] && continue

              type_update=$(echo "${file%/*}" | sed 's/dota2_/Dota 2 /g; s/_/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
              added_lines=$(echo "$added_lines" | sed 's/\r//g')

              msg="**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${type_update}
**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**
${added_lines}
üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç](${commit_url})"

              if [ -n "$updates" ]; then
                updates="${updates}\n\n${msg}"
              else
                updates="${msg}"
              fi
            done
          done < <(git log --no-merges --pretty=format:"%H" "$before..$after" | tac)

          if [ -n "$updates" ]; then
            json=$(jq -n --arg content "$updates" '{content: $content}')
            curl -s -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK" \
              && echo "‚úÖ Sent to Discord." \
              || echo "‚ö†Ô∏è Failed to send Discord message."
          else
            echo "‚ÑπÔ∏è No new Dota updates detected."
          fi
