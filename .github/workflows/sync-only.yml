name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *' # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  workflow_dispatch:
    inputs:
      mode:
        description: 'Run mode (normal/test)'
        required: false
        default: 'normal'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: üß© Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üíæ Save current fork SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üîó Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: ‚öôÔ∏è Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # üîπ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
      - name: üß™ Send test Discord message
        if: ${{ github.event.inputs.mode == 'test' }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "üß™ Sending test message..."
          msg="**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** Dota 2 Test Mode\n**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**\n[v] test 12345 => 12346\n[h] testhash123 => testhash456\n[s] test CN hero => hero2"
          json=$(jq -n --arg content "$msg" '{content: $content}')
          curl -s -H "Content-Type: application/json" -X POST -d "$json" "$DISCORD_WEBHOOK"
          echo "‚úÖ Test message sent."
          exit 0

      - name: üîÑ Merge upstream into fork branch
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }} -m "Fast-forward merge" 2>/dev/null; then
            echo "merged=ff" >> $GITHUB_OUTPUT
          else
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: üíæ Save new SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üöÄ Push if changed
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.before.outputs.before_sha }}" != "${{ steps.after.outputs.after_sha }}" ]; then
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${{ env.FORK_BRANCH }}
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: üì¢ Send Dota updates to Discord
        if: steps.push.outputs.changed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "üì¢ Checking commits for Dota updates..."
          before_sha="${{ steps.before.outputs.before_sha }}"
          after_sha="${{ steps.after.outputs.after_sha }}"

          if git rev-parse "$before_sha" >/dev/null 2>&1 && git rev-parse "$after_sha" >/dev/null 2>&1; then
            echo "üß© Processing commits between $before_sha .. $after_sha"
            git log --pretty=format:"%H" "${before_sha}..${after_sha}" | tac | while read -r hash; do
              [ -z "$hash" ] && continue

              title=$(git show -s --format=%s $hash)
              body=$(git show -s --format=%b $hash)
              commit_url="https://github.com/${{ github.repository }}/commit/$hash"

              # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç embed
              if echo "$title" | grep -iq "staging"; then
                type_update="Dota 2 Staging"
                color=15105570
              elif echo "$title" | grep -iq "experimental"; then
                type_update="Dota 2 Experimental"
                color=10181046
              elif echo "$title" | grep -iq "heroes"; then
                type_update="Dota 2 Heroes"
                color=3066993
              else
                type_update="Dota 2 Update"
                color=3447003
              fi

              added_lines=$(git show $hash | grep -E "^\+" | grep -vE "^\+\+\+|^---" | head -n 10)
              [ -z "$added_lines" ] && added_lines="(–º–µ–ª–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"

              embed_desc="**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${type_update}\n**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**\n${added_lines}\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç](${commit_url})"

              json=$(jq -n \
                --arg title "‚öôÔ∏è Dota 2 Update" \
                --arg desc "$embed_desc" \
                --arg url "$commit_url" \
                --argjson color "$color" \
                '{embeds: [{title: $title, description: $desc, url: $url, color: $color}]}')

              curl -s -H "Content-Type: application/json" \
                   -X POST -d "$json" "$DISCORD_WEBHOOK"

              echo "‚úÖ Sent embed for $hash"
            done
          else
            echo "‚ö†Ô∏è One of SHAs is invalid. before=$before_sha, after=$after_sha"
          fi