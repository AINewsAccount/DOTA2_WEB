name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *' # –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  workflow_dispatch: {} # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master   # –≤–µ—Ç–∫–∞ –≤ –∞–ø—Å—Ç—Ä–∏–º–µ
  FORK_BRANCH: master       # –≤–µ—Ç–∫–∞ –≤ —Ñ–æ—Ä–∫–µ (–ø–æ–º–µ–Ω—è–π –Ω–∞ main, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

jobs:
  sync:
    runs-on: ubuntu-latest

    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–∏–Ω–∞—á–µ push –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)  
    permissions:  
      contents: write  

    steps:  
      - name: üß© Checkout fork  
        uses: actions/checkout@v4  
        with:  
          fetch-depth: 0 # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª merge  

      - name: üíæ Save current fork SHA  
        id: before  
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT  

      - name: üîó Add upstream and fetch  
        run: |  
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true  
          git fetch --no-tags upstream  

      - name: ‚öôÔ∏è Configure git identity  
        run: |  
          git config --global user.name "github-actions[bot]"  
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"  

      - name: üîÑ Merge upstream into fork branch  
        id: merge  
        run: |  
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}  
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }} -m "Fast-forward merge upstream/${{ env.UPSTREAM_BRANCH }}" 2>/dev/null; then  
            echo "merged=ff" >> $GITHUB_OUTPUT  
            echo "‚úÖ Fast-forward merge –≤—ã–ø–æ–ª–Ω–µ–Ω."  
          else  
            echo "‚ÑπÔ∏è Fast-forward –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π merge..."  
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true  
            echo "merged=merge" >> $GITHUB_OUTPUT  
          fi  

      - name: üíæ Save new SHA  
        id: after  
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT  

      - name: üöÄ Compare SHAs and push if changed  
        id: push  
        env:  
          TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        run: |  
          if [ "${{ steps.before.outputs.before_sha }}" != "${{ steps.after.outputs.after_sha }}" ]; then  
            echo "changed=true" >> $GITHUB_OUTPUT  
            echo "‚¨ÜÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è push..."  
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${{ env.FORK_BRANCH }}  
            echo "‚úÖ –§–æ—Ä–∫ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å upstream."  
          else  
            echo "changed=false" >> $GITHUB_OUTPUT  
            echo "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—Å—ë —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ."  
          fi  

      - name: üì¢ Send Dota updates to Discord  
        if: steps.push.outputs.changed == 'true'  
        run: |  
          apt-get update && apt-get install -y tac  # tac –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π  
          while read -r hash; do  
            if [ -z "$hash" ]; then continue; fi  
            msg=$(git show -s --format=%B $hash | sed 's/"/\\"/g')  
            if echo "$msg" | grep -iq "Dota 2"; then  
              formatted_msg="**Dota 2 Update:**\n$msg"  
              curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$formatted_msg\"}" "${{ secrets.DISCORD_WEBHOOK }}"  
            fi  
          done < <(git log --no-merges --pretty=format:"%H" ${{ steps.before.outputs.before_sha }}..${{ steps.after.outputs.after_sha }} | tac)
