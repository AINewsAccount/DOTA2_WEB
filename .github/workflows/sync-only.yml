name: Sync upstream (master) to fork

on:
  schedule:
    - cron: '*/15 * * * *' # –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  workflow_dispatch:
    inputs:
      mode:
        description: '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (auto/test/resend)'
        required: false
        default: 'auto'

env:
  UPSTREAM_OWNER: muk-as
  UPSTREAM_REPO: DOTA2_WEB
  UPSTREAM_BRANCH: master
  FORK_BRANCH: master

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: üß© Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üíæ Save current fork SHA
        id: before
        run: echo "before_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üîó Add upstream and fetch
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git || true
          git fetch --no-tags upstream

      - name: ‚öôÔ∏è Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: üîÑ Merge upstream into fork branch
        id: merge
        run: |
          git checkout ${{ env.FORK_BRANCH }} || git switch ${{ env.FORK_BRANCH }}
          if git merge --ff-only upstream/${{ env.UPSTREAM_BRANCH }} -m "Fast-forward merge upstream/${{ env.UPSTREAM_BRANCH }}" 2>/dev/null; then
            echo "merged=ff" >> $GITHUB_OUTPUT
            echo "‚úÖ Fast-forward merge –≤—ã–ø–æ–ª–Ω–µ–Ω."
          else
            echo "‚ÑπÔ∏è Fast-forward –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π merge..."
            git merge --no-edit upstream/${{ env.UPSTREAM_BRANCH }} || true
            echo "merged=merge" >> $GITHUB_OUTPUT
          fi

      - name: üíæ Save new SHA
        id: after
        run: echo "after_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: üöÄ Compare SHAs and push if changed
        id: push
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.before.outputs.before_sha }}" != "${{ steps.after.outputs.after_sha }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${{ env.FORK_BRANCH }}
            echo "‚úÖ –§–æ—Ä–∫ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å upstream."
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—Å—ë —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ."
          fi

      # -----------------------------------------------
      # üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      # -----------------------------------------------
      - name: üì¢ Send Dota updates to Discord
        if: steps.push.outputs.changed == 'true' || github.event.inputs.mode != ''
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail
# set -x  # –í–∫–ª—é—á–∏ temporarily –¥–ª—è full debug (expanded commands), —É–¥–∞–ª–∏ –ø–æ—Å–ª–µ

MODE="${{ github.event.inputs.mode || 'auto' }}"
echo "üì¢ Mode: $MODE"

# üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –µ—Å—Ç—å)
if [[ "$MODE" == "test" ]]; then
  echo "üß™ Sending test message..."
  embed_title="üß™ Dota 2 Test Notification"
  embed_desc=$'**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** Dota 2 Test Mode\n\n**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**\n[v] test 12345 => 12346\n[h] testhash123 => testhash456\n[s] test CN hero => hero2\n\nüîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç'
  jq -n \
    --arg title "$embed_title" \
    --arg desc "$embed_desc" \
    '{embeds: [{title: $title, description: $desc, color: 5814783}]}' \
  | curl -s -H "Content-Type: application/json" -X POST -d @- "$DISCORD_WEBHOOK"
  exit 0
fi

# –°–∞–Ω–∞–π—Ç–∏–∑–∞—Ü–∏—è SHA (–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ)
before_raw="${{ steps.before.outputs.before_sha }}"
after_raw="${{ steps.after.outputs.after_sha }}"
before=$(printf '%s' "$before_raw" | tr -d '\r\n' | awk '{$1=$1;print}')
after=$(printf '%s' "$after_raw" | tr -d '\r\n' | awk '{$1=$1;print}')
echo "DEBUG: before='$before' after='$after'"

# Robust fetch (–∫–æ–º–±–æ: set-url + unshallow + depth)
git remote set-url upstream "https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git" || true
git fetch --no-tags upstream || true
if ! git rev-parse "$before" >/dev/null 2>&1 || ! git rev-parse "$after" >/dev/null 2>&1; then
  echo "‚ö†Ô∏è SHA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è fetch --unshallow..."
  git fetch --no-tags --unshallow upstream || true
  git fetch --no-tags upstream --depth=1000 || true  # –î–ª—è –±–æ–ª—å—à–æ–π –∏—Å—Ç–æ—Ä–∏–∏
fi

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ log_range (–º–æ–π —Å—Ç–∏–ª—å + --reverse –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ)
if git rev-parse "$before" >/dev/null 2>&1 && git rev-parse "$after" >/dev/null 2>&1; then
  range="$before..$after"
  echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω $range"
  echo "DEBUG: range for git log is $range"
  log_range=$(git log --pretty=format:"%H" "$range" --reverse)
else
  echo "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–∏—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
  log_range=$(git log -n 5 --pretty=format:"%H" --reverse)
fi

# –†–µ–∂–∏–º resend
if [[ "$MODE" == "resend" ]]; then
  echo "üîÅ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞..."
  log_range=$(git log -n 1 --pretty=format:"%H")
fi

echo "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–∏—Ç—ã..."
while read -r hash; do
  [ -z "$hash" ] && continue
  title=$(git show -s --format=%s "$hash")
  body=$(git show -s --format=%b "$hash")
  commit_url="https://github.com/${{ github.repository }}/commit/$hash"

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  if echo "$title" | grep -iq "staging"; then
    type_update="Dota 2 Staging"
  elif echo "$title" | grep -iq "experimental"; then
    type_update="Dota 2 Experimental"
  elif echo "$title" | grep -iq "heroes"; then
    type_update="Dota 2 Heroes"
  else
    type_update="Dota 2 Update"
  fi

  # Changes (–º–æ–π —É–ª—É—á—à–µ–Ω–Ω—ã–π: + –∏ - —Å—Ç—Ä–æ–∫–∏)
  changes=$(git show "$hash" | grep -E "^[+-]" | grep -vE "^\+\+\+|^---" | head -n 10)
  [ -z "$changes" ] && changes="(–º–µ–ª–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"

  # Embed
  embed_title="üß© ${type_update}"
  embed_desc=$(printf '**–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** %s\n\n**–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:**\n%s\n\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç](%s)' "$type_update" "$changes" "$commit_url")

  jq -n \
    --arg title "$embed_title" \
    --arg desc "$embed_desc" \
    '{embeds: [{title: $title, description: $desc, color: 3066993}]}' \
  | curl -s -H "Content-Type: application/json" -X POST -d @- "$DISCORD_WEBHOOK"

  echo "‚úÖ Sent update for $hash"
done <<< "$log_range"
